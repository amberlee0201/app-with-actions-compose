name: App With Github Actions with Docker CI/CD
on:
  push

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: add application.properties
        run: |
          echo "${{ secrets.APP_PROPERTIES }}" >> src/main/resources/application.properties

      - name: check app.prop
        run: cat src/main/resources/application.properties

      - name: Build with Maven
        run: mvn -B -DskipTests package --file pom.xml

      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      - name: Check jar file
        run: ls ./target

      - uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./target/*.jar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/app-with-actions:latest
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        # GitHub Actions는 기본적으로 현재 리포지토리를 실행 환경으로 복제합니다.

      - name: copy create-table.sql
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          strip_components: 5
          source: src/main/resources/static/sql/create-table.sql
          target: /home/ubuntu/data/sql

      - name: run docker compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo docker-compose -f /home/ubuntu/app/compose.yaml up